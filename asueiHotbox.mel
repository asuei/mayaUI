global proc asueiHotbox(){
 python("import maya.cmds as cmds");

 $sl = `ls -selection -objectsOnly` ;
 $eSel = 2 ; //Selected amount
 $eSkin = 0 ; $eBs = 0 ; $eCc = 0 ; $eCloth = 0 ; $eCrv = 0 ; $eTxt = 0 ;

 if(size($sl)==0) $eSel = 0 ;
 if(size($sl)==1) $eSel = 1 ;

 for($x in $sl){
  $gc = ` listHistory -interestLevel 1 -pruneDagObjects 1 $x ` ;
  for($y in $gc){
   $nt = ` nodeType $y ` ;
   if($nt=="skinCluster") $eSkin = 6 ;
   if($nt=="blendShape") $eBs = 1 ;
   if($nt=="cluster") $eCc = 1 ;
   if($nt=="textureDeformer") $eTxt = 1 ;
  }
  $gc = ` listHistory -interestLevel 1 -pruneDagObjects 0 $x ` ;
  for($y in $gc){
   $nt = ` nodeType $y ` ;
   if($nt=="nCloth") $eCloth = 1 ;
  }
  $nt = ` nodeType $x ` ;
  if($nt=="transform"){
   $s = ` listRelatives -shapes -path $x ` ;
   if(size($s)>0) $nt = ` nodeType $s[0] ` ;
  }
  if($nt=="nurbsCurve"){
   $eCrv = 2 ;
  }
 }

//$slvn = ` polyEvaluate -vertexComponent ` ;
 $lsf = `ls -selection -fl -type float3` ;
 if(size($lsf)>0){
  string $mna[] ;
  $i = 0 ;
  while($i<size($lsf)&&$i<50){
   $mn = stringToStringArray($x,".") ;
   $mna[size($mna)] = $mn[0] ;
   $i++ ;
  }
  $mna = stringArrayRemoveDuplicates($mna) ;
  for($x in $mna){
   $sk = findRelatedSkinCluster($x) ;
   if($sk!="") $eSel =3 ;
  }
 }


//==============================
//   |++| |++++|
//   |++|       |+++|
//   |++| |oo|  |+++|
//   |++| |oo|  |+++|
//   |++| |oo|
//   |++| |oo|  |+++++|
//   |++| |oo|  |+++++|
//   |++| |oo|
//   |++| |oo|  |++|
//   |++| |oo|  |++|
//   |++|       |++|
window -title "Constrain Grid" -titleBar 0 -resizeToFitChildren on win_ConsG ;
gridLayout -numberOfColumns 1 -cellWidthHeight 130 35;
 nodeIconButton -style "iconAndTextHorizontal" -image1 "projectCurve_Poly.png" -label "nodeType" -command ("$sl = `ls -sl`; inViewMessage -smg (`nodeType $sl[0]`) -pos botCenter -bkc 0x00000000 -fade ; print (`nodeType $sl[0]`);") ;
 nodeIconButton -style "iconAndTextHorizontal" -image1 "pointlight.png" -label "be parentCons" -command ("as_beConstraint(1,1,0)") ashb_beCons ;
  popupMenu -parent ashb_beCons ;
  menuItem -label "be pointCons" -command ("as_beConstraint(1,0,0)") ;
  menuItem -label "be orientCons" -command ("as_beConstraint(0,1,0)") ;
 rowLayout -numberOfColumns 2 -columnWidth2 65 65 ;
  nodeIconButton -style "iconAndTextHorizontal" -width 65 -height 35 -label "source" -command ("as_selIoPut\(0\)") ;
  nodeIconButton -style "iconAndTextHorizontal" -width 65 -height 35 -label "output" -command ("as_selIoPut\(1\)") ;
  setParent ..;
 nodeIconButton -style "iconAndTextHorizontal" -image1 "skin.png" -label "Constrain Source" -command ("as_constrainSource") ;
 nodeIconButton -style "iconAndTextHorizontal" -image1 "nConstraintReplaceMembers.png" -label "Delete Constrains" -command ("as_delConstrain") ;
 
$ctx = `currentCtx`;
//print $ctx ;
if($ctx=="artAttrSkinContext"){
 nodeIconButton -style "iconAndTextHorizontal" -image1 "smoothSkinWeights.png" -label "Switch Display"-command ("as_swapArtSkin") ;
 nodeIconButton -style "iconAndTextHorizontal" -image1 "paintSkinWeights.png" -label "Replace 0"-command ("artAttrPaintOperation artAttrSkinPaintCtx Replace; artSkinSetSelectionValue 0 false artAttrSkinPaintCtx artAttrSkin;") ;
 nodeIconButton -style "iconAndTextHorizontal" -image1 "paintSkinWeights.png" -label "Add 0.01"-command ("artAttrPaintOperation artAttrSkinPaintCtx Add; artSkinSetSelectionValue 0.01 false artAttrSkinPaintCtx artAttrSkin;") ;
 nodeIconButton -style "iconAndTextHorizontal" -image1 "paintSkinWeights.png" -label "Add 0.025"-command ("artAttrPaintOperation artAttrSkinPaintCtx Add; artSkinSetSelectionValue 0.025 false artAttrSkinPaintCtx artAttrSkin;") ;
 nodeIconButton -style "iconAndTextHorizontal" -image1 "interactiveBindTool.png" -label "Add 0.1"-command ("artAttrPaintOperation artAttrSkinPaintCtx Add; artSkinSetSelectionValue 0.1 false artAttrSkinPaintCtx artAttrSkin;") ;
 nodeIconButton -style "iconAndTextHorizontal" -image1 "paintSkinWeights.png" -label "Scale 0.9"-command ("artAttrPaintOperation artAttrSkinPaintCtx Scale; artSkinSetSelectionValue 0.9 false artAttrSkinPaintCtx artAttrSkin;") ;
 nodeIconButton -style "iconAndTextHorizontal" -image1 "paintSkinWeights.png" -label "Scale 0.99"-command ("artAttrPaintOperation artAttrSkinPaintCtx Scale; artSkinSetSelectionValue 0.99 false artAttrSkinPaintCtx artAttrSkin;") ;
 nodeIconButton -style "iconAndTextHorizontal" -image1 "paintSkinWeights.png" -label "Smooth"-command ("artAttrPaintOperation artAttrSkinPaintCtx Smooth;") ;
 nodeIconButton -style "iconAndTextHorizontal" -image1 "interactiveBindTool.png" -label "Scale 0.5"-command ("artAttrPaintOperation artAttrSkinPaintCtx Scale; artSkinSetSelectionValue 0.5 false artAttrSkinPaintCtx artAttrSkin;") ;
}else if($ctx=="artAttrContext"||$ctx=="artAttrBlendShapeContext"||$ctx=="artAttrNComponentContext"){
 nodeIconButton -style "iconAndTextHorizontal" -image1 "paintSkinWeights.png" -label "Replace 0"-command ("artAttrPaintOperation artAttrCtx Replace; artAttrCtx -e -value 0 `currentCtx`;") ;
 nodeIconButton -style "iconAndTextHorizontal" -image1 "paintSkinWeights.png" -label "Add 0.01"-command ("artAttrPaintOperation artAttrCtx Add; artAttrCtx -e -value 0.01 `currentCtx`;") ;
 nodeIconButton -style "iconAndTextHorizontal" -image1 "paintSkinWeights.png" -label "Add 0.025"-command ("artAttrPaintOperation artAttrCtx Add; artAttrCtx -e -value 0.025 `currentCtx`;") ;
 nodeIconButton -style "iconAndTextHorizontal" -image1 "interactiveBindTool.png" -label "Add 0.1"-command ("artAttrPaintOperation artAttrCtx Add; artAttrCtx -e -value 0.1 `currentCtx`;") ;
 nodeIconButton -style "iconAndTextHorizontal" -image1 "paintSkinWeights.png" -label "Scale 0.9"-command ("artAttrPaintOperation artAttrCtx Scale; artAttrCtx -e -value 0.9 `currentCtx`;") ;
 nodeIconButton -style "iconAndTextHorizontal" -image1 "paintSkinWeights.png" -label "Scale 0.99"-command ("artAttrPaintOperation artAttrCtx Scale; artAttrCtx -e -value 0.99 `currentCtx`;") ;
 nodeIconButton -style "iconAndTextHorizontal" -image1 "paintSkinWeights.png" -label "Smooth"-command ("artAttrPaintOperation artAttrCtx Smooth;") ;

}else if($eSel==0){
 nodeIconButton -style "iconAndTextHorizontal" -image1 "aselect.png" -label "animtion key"-command ("as_animKey(\"\")") ;
 nodeIconButton -style "iconAndTextHorizontal" -image1 "aselect.png" -label "same name node"-command ("as_sameName") ;
 nodeIconButton -style "iconAndTextHorizontal" -image1 "noAccess.png" -label "bindPose" -c ("as_delPose") ashBtn_dbp ;
 nodeIconButton -style "iconAndTextHorizontal" -image1 "noAccess.png" -label "turtle" -command ("as_turtleLayer") ashBtn_dtt ;
 nodeIconButton -style "iconAndTextHorizontal" -image1 "noAccess.png" -label "intermediate Obj" -command ("as_delImobj") ;
 nodeIconButton -style "iconAndTextHorizontal" -image1 "noAccess.png" -label "unused node" -command ("MLdeleteUnused") ;
 nodeIconButton -style "iconAndTextHorizontal" -image1 "menuIconHelp.png" -label "unknown set" -command ("as_delUnknown") as_unknown ;
 nodeIconButton -style "iconAndTextHorizontal" -image1 "menuIconHelp.png" -label "lock normal" -command ("as_findLockNormal") as_lockNormal ;
 if(size(`ls -type nCloth`)> 0) nodeIconButton -style "iconAndTextHorizontal" -image1 "menuIconHelp.png" -label "Print Thickness" -command ("as_printThickness") as_thickness ;
 if(size(` ls -type dagPose`)==0) nodeIconButton -e -enable 0 ashBtn_dbp ;
 if(`objExists TurtleDefaultBakeLayer`==0) nodeIconButton -e -enable 0 ashBtn_dtt ;
}else if($eSel==1){
 $sp = ` listRelatives -shapes -noIntermediate -path $sl ` ; // shape path
 $ip = ` listHistory -pruneDagObjects 1 -interestLevel 1 $sl ` ;
 $op = ` listHistory -pruneDagObjects 1 -interestLevel 1 -future 1 $sl ` ;
 $ap = stringArrayCatenate($sp,$ip) ;
 $ap = stringArrayCatenate($ap,$op) ;
 for($x in $ap){
  $ic = "menuIconHelp.png" ;
  $nt = ` nodeType $x ` ;
  if($nt=="mesh") $ic = "polySoccerBall.png" ;
  if($nt=="skinCluster") $ic = "substGeometry.png" ;
  if($nt=="tweak") $ic = "interactiveBindTool.png" ;
  nodeIconButton -style "iconAndTextHorizontal" -image1 $ic -label $x -c ("select -r "+$x) ;
 }
 nodeIconButton -style "iconAndTextHorizontal" -image1 "menuIconHelp.png" -label "Material" -command ("as_getMetarial") as_selMate ;
}else if($eSel==2){
 shelfButton -style "iconAndTextHorizontal" -image1 "posConstraint.png" -label "Point (snap)" -noDefaultPopup -command ("pointConstraint -offset 0 0 0 -weight 1") ;
 shelfButton -style "iconAndTextHorizontal" -image1 "orientConstraint.png" -label "Orient (snap)" -noDefaultPopup -command ("orientConstraint -offset 0 0 0 -weight 1;") ;
 rowLayout -numberOfColumns 2 -columnWidth2 90 25 ;
  shelfButton -style "iconAndTextHorizontal" -image1 "parentConstraint.png" -label "Parent      " -noDefaultPopup -command ("parentConstraint -weight 1") ;
  shelfButton -style "iconAndTextHorizontal" -image1 "nConstraintMembership.png" -noDefaultPopup -command ("parentConstraint -mo -weight 1") ;
 setParent ..;
 shelfButton -style "iconAndTextHorizontal" -image1 "scaleConstraint.png" -label "Scale (snap)" -noDefaultPopup -command ("doCreateScaleConstraintArgList 1 { \"0\",\"1\",\"1\",\"1\",\"0\",\"0\",\"0\",\"1\",\"\",\"1\" };") ;
 shelfButton -style "iconAndTextHorizontal" -image1 "aimConstraint.png" -label "Aim Option" -noDefaultPopup -command ("AimConstraintOptions;") ;
 rowLayout -numberOfColumns 3 -columnWidth3 65 34 25 ;
  shelfButton -style "iconAndTextHorizontal" -image1 "render_decomposeMatrix.png" -label "trans" -noDefaultPopup -command ("as_transValue({1,1,1,1},0,0)") ashb_tvt ;
   popupMenu -parent ashb_tvt ;
   menuItem -label "minus" -command ("as_transValue({1,-1,-1,-1},0,0)") ;
   menuItem -label "minus x only" -command ("as_transValue({1,-1,1,1},0,0)") ;
  shelfButton -style "textOnly" -label "rotate" -height 35 -noDefaultPopup -command ("as_transValue({0},1,0)") ;
  shelfButton -style "textOnly" -label "scale" -height 35 -noDefaultPopup -command ("as_transValue({0},0,1)") ;
  setParent ..;
 //nodeIconButton -style "iconAndTextHorizontal" -image1 "posDrag.png" -label "Matrix" -command ("as_matrixCons") ashb_mc ;
 shelfButton -style "iconAndTextHorizontal" -image1 "posDrag.png" -label "Matrix" -noDefaultPopup -command ("as_matrixCons(0)") ashb_mc ;
  popupMenu -parent ashb_mc ;
  menuItem -label "Local" -command ("as_matrixCons(1)") ;
  menuItem -label "Matrix Match Space" -command ("as_matrixSpace; as_matrixCons;") ;
 shelfButton -style "iconAndTextHorizontal" -image1 "polyMerge.png" -label "connect mesh" -noDefaultPopup -command ("as_connectMesh") ;
 nodeIconButton -style "iconAndTextHorizontal" -image1 "poleVectorConstraint.png" -label "Pole Vector" -command ("poleVectorConstraint -weight 1") ;
}


//==============================
//   |++|   |+++++|
//   |++| |++|  |oooo|
//   |++| |++|  |oooo|
//   |++| |++|  |oooo|
//   |++| |++|  |+++++|
//   |++| |++|  |+++++|
//   |++| |++|  |++|
//   |++| |++|  |++|
//   |++|       |++|
//   |++|       |++|
window  -titleBar 0 -resizeToFitChildren on win_DeG ;
gridLayout -numberOfColumns 4 -cellWidthHeight 50 50 -bgc 0.2 0.2 0.22 grid_interect ;

iconTextButton -style "iconAndTextCentered" -image1 "polySelectBoundary.png" -command ("as_vertexWeightCheckUI") -annotation "Vertex weight checker" ;
iconTextButton -style "iconAndTextCentered" -image1 "bakeAnimation.png" -command ("as_attrSliderUI") -annotation "Vertex weight checker" ;
iconTextButton -style "iconAndTextCentered" -image1 "paintSkinWeights.png" -command ("as_paintWeightTools") -annotation "Auto detect paint weight tool" ;
iconTextButton -style "iconAndTextCentered" -image1 "scriptEdPersp.png" -command ("as_scriptFolderUI") -annotation "Scripts Folder" ;

string $imageList[],$cmdList[] ;
$imageList[0] = "circle.png" ; $cmdList[0] = "circle" ;
$imageList[1] = "curveCV.png" ; $cmdList[1] = "CVCurveTool" ;
$imageList[2] = "curveEP.png" ; $cmdList[2] = "EPCurveTool" ;
$imageList[3] = "polyCylinder.png" ; $cmdList[3] = "polyCylinder -sx 16 " ;
$imageList[4] = "polyCube.png" ; $cmdList[4] = "polyCube" ;
$imageList[5] = "polySphere.png" ; $cmdList[5] = "polySphere -r 1 -sx 20 -sy 20 -ax 0 1 0 -cuv 2 -ch 1;" ;
$imageList[6] = "polyMesh.png" ; $cmdList[6] = "polyPlane -w 10 -h 10 -sx 10 -sy 10 ;" ;
$imageList[7] = "locator.png" ; $cmdList[7] = "spaceLocator" ;

int $bc = 8 - $eSkin - $eBs - $eCc - $eCloth - $eCrv ;
$i = 0 ;
while($i<$bc){
 nodeIconButton -image1 $imageList[$i] -c $cmdList[$i] ;
 $i++ ;
}

if($eSkin>0){
 nodeIconButton -bgc .15 .2 .2 -image1 "mirrorSkinWeight.png" -command ("MirrorSkinWeightsOptions") ;
 nodeIconButton -bgc .15 .2 .2 -image1 "copySkinWeight.png" -command ("CopySkinWeightsOptions") ;
 shelfButton -style "iconOnly" -bgc .15 .2 .2 -image1 "art3dPaint.png" -noDefaultPopup -command ("weightHammerVerts") ;
 nodeIconButton -bgc .15 .2 .2 -image1 "moveSkinnedJoint.png" -command ("as_selectInf") -annotation "Select bind inflence." ;
 nodeIconButton -bgc .15 .2 .2 -image1 "removeSkinInfluence.png" -command ("removeUnusedInfluences") -annotation "Remove nused influences." ;
 nodeIconButton -bgc .15 .2 .2 -image1 "detachSkin.png" -command ("DetachSkin") -annotation "Detach Skin." ;
}
if($eCc==1) nodeIconButton -bgc .2 .15 .2 -image1 "paintCluster.png" -command ("artAttrToolScript 4 \"cluster\";") ;
if($eBs==1) nodeIconButton -bgc .2 .2 .15 -style "iconOnly" -image1 "paintBlendshape.png" -command ("ArtPaintBlendShapeWeightsToolOptions;") ;
if($eCloth==1) nodeIconButton -bgc .2 .2 .15 -style "iconOnly" -image1 "nConstraintTearable.png" -command ("setNClothMapType(\"inputAttract\",\"\",1); artAttrNClothToolScript 4 inputAttract;") -annotation "Paint Input Attract" ;
if($eCrv>0){
 nodeIconButton -bgc .15 .15 .2 -image1 "curveEP.png" -label "CV" -command ("ToggleCVs") ;
 nodeIconButton -bgc .15 .15 .2 -image1 "rebuildCurve.png" -command ("RebuildCurveOptions") ;
}

//==============================
//   |++|   |ooooo|
//   |++| |++|  |+++|
//   |++| |++|  |+++|
//   |++| |++|  |+++|
//   |++| |++|  |+++++|
//   |++| |++|  |+++++|
//   |++| |++|  |++|
//   |++| |++|  |++|
//   |++|       |++|
//   |++|       |++|
window -title "Grid of Show" -titleBar 0 -resizeToFitChildren on win_GoS ;
gridLayout -numberOfColumns 7 -cellWidthHeight 40 40 -bgc 0.2 0.21 0.21 ;
$asfw = `getPanel -withFocus` ;
global int $meJo ;
iconTextButton -style "textOnly" -label "HUD" -c ("TogglePolyCount;ToggleFocalLength;ToggleCurrentFrame;") ashb_pc ;
 popupMenu -parent ashb_pc ;
 menuItem -label "reset UI Position" -command ("as_resetUiPos()") ;
iconTextButton -style "iconAndTextCentered" -label "frame\nrange" -c ("playbackOptions -minTime (`getAttr \"defaultRenderGlobals.startFrame\"`) ; playbackOptions -maxTime (`getAttr \"defaultRenderGlobals.endFrame\"`) ;") ashb_sfr ;
 popupMenu -parent ashb_sfr ;
 menuItem -label "abc Range" -command ("as_abcRange") ;
iconTextButton -style "textOnly" -label "cam\nPref" -c ("as_camPref()") ashb_camRref ;
iconTextButton -style "textOnly" -label "joint" -c ("if($meJo==0){ modelEditor -e -joints 1 modelPanel4; $meJo=1; } else { modelEditor -e -joints 0 modelPanel4; $meJo=0; }") ;
iconTextButton -style "textOnly" -label "farClip" -c ("as_nfClip(0)") ashb_clip ;
 popupMenu -parent ashb_clip ;
 menuItem -label "x 0.1" -command ("as_nfClip(1)") ;
iconTextButton -style "textOnly" -label "show\nall" -c ("modelEditor -e -allObjects 1 "+$asfw) ;
iconTextButton -style "textOnly" -label "show\nview" -c ("modelEditor -e -allObjects 0 -nurbsSurfaces true -polymeshes true -strokes true "+$asfw) ashb_cView ;
 popupMenu -parent ashb_cView ;
 menuItem -label "No Strokes" -command ("modelEditor -e -allObjects 0 -nurbsSurfaces true -polymeshes true "+$asfw) ;


//==============================
//   |oo|   |+++++|
//   |oo| |++|  |+++|
//   |oo| |++|  |+++|
//   |oo| |++|  |+++|
//   |oo| |++|  |+++++|
//   |oo| |++|  |+++++|
//   |oo| |++|  |++|
//   |oo| |++|  |++|
//   |oo|       |++|
//   |oo|       |++|
window -title "Grid of Objects" -titleBar 0 -resizeToFitChildren on win_GoOs ;
gridLayout -numberOfColumns 2 -cellWidthHeight 45 45 -bgc 0.21 0.21 0.2 ;

iconTextButton -image1 "create.png" -c ("as_posLocator") -annotation "Locator at select transform." ;
iconTextButton -image1 "toonToPolygons.png" -command ("as_copyPivot") -annotation "Copy Pivot." ashb_cp ;
iconTextButton -image1 "menuIconHelp.png" -c ("as_trans(\"\",\"\")") -annotation "Create parent transform." ashb_cpt ;
 popupMenu -parent ashb_cpt ;
 menuItem -label "ctrl_ ctrlTrans_" -command ("as_trans(\"ctrl_\",\"ctrlTrans_\")") ;
 menuItem -label "_ctrl _ctrlEnv" -command ("as_trans(\"_ctrl\",\"_ctrlEnv\")") ;
iconTextButton -image1 "polyFlipEdge.png" -command ("as_duplucateConnect") -annotation "polyDuplicateAndConnect." ;
iconTextButton -image1 "polyCircularize.png" -command ("as_pureDupli") -annotation "polyDuplicate original mesh." ;
iconTextButton -image1 "view.png" -command ("as_moveToLook") -annotation "Put a joint into selected transform." ;
iconTextButton -image1 "kinJoint.png" -command ("as_createJoint") -annotation "Create joint and transform or put into selected transform." ashb_jo ;
 popupMenu -parent ashb_jo ;
 menuItem -label "orderID" -command ("as_orderID") ;
iconTextButton -image1 "kinHandle.png" -command ("IKHandleTool") -annotation "IK Handle Tool." -noBackground 1 ashb_ikh ;
 popupMenu -parent ashb_ikh ;
 menuItem -label "spline IK Tool" -command ("IKSplineHandleToolOptions") ;
iconTextButton -image1 "smoothSkin.png" -command ("as_smoothBindSkin") -annotation "Smooth Bind Skin" ashb_sbs ;
 popupMenu -parent ashb_sbs ;
 menuItem -label "Rebind" -command ("as_rebind") ;
iconTextButton -image1 "addWrapInfluence.png" -command ("AddInfluenceOptions") -annotation "Add influence" -noBackground 1 ashb_ai ;
 popupMenu -parent ashb_ai ;
 menuItem -label "remove influence" -command ("RemoveInfluence") ;
shelfButton -style "iconOnly" -image1 "blendShape.png" -label "blendShape" -noDefaultPopup -command ("as_setOrigBsKey(0)") ashb_bs ;
 popupMenu -parent ashb_bs ;
 menuItem -label "Origin World" -command ("as_setOrigBsKey(1)") ;
 menuItem -label "create BS and set key" -command ("as_setOrigBsKey(2)") ;
iconTextButton -image1 "blendShapePlus.png" -command ("AddBlendShapeOptions;") -noBackground 1 -annotation "Add blendShape." ashb_bsp ;
 popupMenu -parent ashb_bsp ;
 menuItem -label "remove blendShape" -command ("RemoveBlendShape") ;
iconTextButton -image1 "setEdit.png" -command ("EditMembershipTool") -annotation "Edit membership tool" ;
shelfButton -image1 "cluster.png" -noDefaultPopup -command ("as_cluster(1)") -annotation "cluster" ashb_cc ;
 popupMenu -parent ashb_cc ;
 menuItem -label "Each One" -command ("as_cluster(2)") ;

iconTextButton -image1 "wire.png" -command ("wireContext -e -dropoffDistance 100 wireCtx; WireTool;") -annotation "wire tool" ;
iconTextButton -image1 "lattice.png" -command ("lattice -divisions 2 2 2 -objectCentered 1 -outsideLattice 1 ;") -annotation "lattice" ashb_ffd ;
 popupMenu -parent ashb_ffd ;
 menuItem -label "Each One" -command ("for($x in `ls -sl`) lattice -divisions 2 2 2 -objectCentered 1 -outsideLattice 1 $x ;") ;
iconTextButton -image1 "wrap.png" -command ("doWrapArgList \"3\" {\"1\",\"0\",\"5\",\"2\"};") -annotation "wrap" ;
iconTextButton -image1 "input.png" -command ("as_reorderHistory(1)") -annotation "Reorder History." ashb_reHis ;
 popupMenu -parent ashb_reHis ;
 menuItem -label "Order 2" -command ("as_reorderHistory(2)") ;
iconTextButton -image1 "nClothDisplayInput.png" -command ("as_cancelImo") -annotation "Set intermediate to 0." ;
//iconTextButton -style "iconAndTextCentered" -image1 "moveNormal.png" -command ("MoveNormalTool") -annotation "Move Normal Tool" ;
iconTextButton -style "iconAndTextCentered" -image1 "copySkinWeight.png" -command ("as_copySkinCluster") -annotation "Copy skinCluster" ;
iconTextButton -image1 "flyThroughCursor.png" -command ("ungroup") -annotation "Ungroup" ;
iconTextButton -image1 "polyMirrorGeometry.png" -command ("as_mirrorPoint(0)") -annotation "Mirror varied point" ashb_mrp ;
 popupMenu -parent ashb_mrp ;
 menuItem -label "Mirror worldSpace" -command ("as_mirrorPoint(1)") ;
 menuItem -label "Reverse Normals" -command ("ReversePolygonNormals") ;
iconTextButton -image1 "render_lambert.png" -annotation "Assign lambert1" -command ("sets -e -forceElement initialShadingGroup (`ls -sl`) ;") ;
iconTextButton -image1 "render_layeredShader.png" -command ("as_transMaterial") -annotation "Transfer Material" ;
//iconTextButton -image1 "nClothCreatePassive.png" -command ("nClothMakeCollideOptions") -annotation "Make collide options" ;
iconTextButton -image1 "menuIconKeys.png" -command ("SetDrivenKeyOptions") -annotation "Driven Key" ;
//iconTextButton -image1 "nClothCacheCreate.png" -command ("nClothCache") -annotation "Create nCloth cache" ashb_nCache ;
iconTextButton -image1 "nClothCreate.png" -command ("doCreateNCloth 1") -annotation "Create nCloth cache" ashb_nCache ;
 popupMenu -parent ashb_nCache ;
 menuItem -label "Option" -command ("nClothCacheOpt") ;
 menuItem -label "Delete nCloth cache" -command ("deleteNclothCache") ;
 menuItem -label "Identify nCache" -command ("as_identifyNCache") ;

//==============================
//   |++|   |+++++|
//   |++| |++|  |+++|
//   |++| |++|  |+++|
//   |++| |++|  |+++|
//   |++| |++|  |ooooo|
//   |++| |++|  |ooooo|
//   |++| |++|  |++|
//   |++| |++|  |++|
//   |++|       |++|
//   |++|       |++|
window -title "Grid of Setting" -titleBar 0 -widthHeight 1000 10 -resizeToFitChildren on win_GoSet ;
gridLayout -numberOfColumns 5 -cellWidthHeight 45 45 -bgc 0.22 0.2 0.2 ;

iconTextButton -style "iconAndTextCentered" -image1 "setKeyframe.png" -label "" -command ("as_setTestKey") ashb_testKey ;
 popupMenu -parent ashb_testKey ;
 menuItem -label "clean key" -c ("as_cleanKey(0)") ;
iconTextButton -style "iconAndTextCentered" -image1 "vacantCell.png" -label "AnimObj" -command ("as_animKey(\"obj\")") ;
iconTextButton -style "iconAndTextCentered" -image1 "vacantCell.png" -label "set\nAttr" -command ("as_attrZero(-1)") ashb_zero ;
 popupMenu -parent ashb_zero ;
 menuItem -label "round 2 decimal" -c ("as_attrZero(2)") ;
 menuItem -label "round 1 decimal" -c ("as_attrZero(1)") ;
 menuItem -label "round 0 decimal" -c ("as_attrZero(0)") ;
 menuItem -label "Zero Joint Orient" -c ("as_zeroJointOrient") ;
 menuItem -label "Zero Rotate (joint)" -c ("as_zeroJointRotate") ;
iconTextButton -style "iconAndTextCentered" -image1 "vacantCell.png" -label "open\nAttr" -command ("as_attrDefault") ;
iconTextButton -style "iconAndTextCentered" -image1 "vacantCell.png" -label "lock\nAttr" -command ("asLockAttr") ashb_la ;
 popupMenu -parent ashb_la ;
 menuItem -label "Prefer angle and Rotate orient" -c ("asLockPreferOrient") ;
iconTextButton -style "iconAndTextCentered" -image1 "flow.png" -label "" -command ("sets `ls -sl`;") ;
iconTextButton -style "iconAndTextCentered" -image1 "flowSurface.png" -label "" -command ("$sl = $sl2 = `ls -sl` ; $sls = (size($sl)-1) ; stringArrayRemoveAtIndex($sls,$sl2); sets -add $sl[size($sl)-1] $sl2 ;") ;
iconTextButton -style "iconAndTextCentered" -image1 "flowSurfaceDelete.png" -label "" -command ("$sl = $sl2 = `ls -sl` ; $sls = (size($sl)-1) ; stringArrayRemoveAtIndex($sls,$sl2); sets -remove $sl[size($sl)-1]  ;") ;
iconTextButton -style "iconAndTextCentered" -image1 "vacantCell.png" -label "Ex" -command ("as_quickExIm(0)") ashb_qe ;
 popupMenu -parent ashb_qe ;
 menuItem -label "Export Selection" -c ("as_selectionExIm(0)") ;
 menuItem -label "Export skin weight" -c ("as_skinWeightExIm(0)") ;
 menuItem -label "Export animation key" -c ("as_animExIm(0)") ;
 menuItem -label "Export Sets" -c ("as_setsExIm(0)") ;
iconTextButton -style "iconAndTextCentered" -image1 "vacantCell.png" -label "Im" -command ("as_quickExIm(1)") ashb_qi ;
 popupMenu -parent ashb_qi ;
 menuItem -label "Import Selection" -c ("as_selectionExIm(1)") ;
 menuItem -label "Import skin weight" -c ("as_skinWeightExIm(1)") ;
 menuItem -label "Import animation key" -c ("as_animExIm(1)") ;
 menuItem -label "Import Sets" -c ("as_setsExIm(1)") ;

//==============================
//   |++|   |+++++|
//   |++| |++|  |+++|
//   |++| |++|  |+++|
//   |++| |++|  |+++|
//   |++| |++|  |+++++|
//   |++| |++|  |+++++|
//   |++| |++|  |oo|
//   |++| |++|  |oo|
//   |++|       |oo|
//   |++|       |oo|
window -title "Grid of Camera" -titleBar 0 -resizeToFitChildren on win_GoC ;


$lsc = ` ls -type "camera" ` ;
gridLayout -numberOfColumns 1 -cellWidthHeight 140 36 ;

$i = 0 ;
while($i<size($lsc)){
 $p = ` listRelatives -parent $lsc[$i] ` ;
  rowLayout -numberOfColumns 2 -columnWidth2 120 20 ;
  nodeIconButton -style "textOnly" -width 120 -height 36 -label $p[0] -c ("lookThroughModelPanel "+$lsc[$i]+" (`getPanel -withFocus`)") ;
  nodeIconButton -style "textOnly" -width 20 -height 36 -label "" -c ("as_cameraWindow(\""+$lsc[$i]+"\")") ;
  setParent ..;
 $i++;
}


//==============================
$cx = 960 ;
$cy = 540 ;
if(`about -windows `){
 python( "from ctypes import *" );
 python( "from ctypes.wintypes import *" );
 python( "global pt" );
 python( "pt = POINT()" );
 python( "windll.user32.GetCursorPos(byref(pt))" );
 $cx = python("pt.x") ;
 $cy = python("pt.y") ;
}

$cpx = $cx - 150 ; $cpy = $cy - 170 ;
windowPref -e -width 130 -height 150 -topLeftCorner $cpy $cpx win_ConsG ;
showWindow win_ConsG ;


$cpx = $cx + 5 ; $cpy = $cy - 170 ;
windowPref -e -width 130 -height 150 -topLeftCorner $cpy $cpx win_DeG ;
showWindow win_DeG ;


$cpx = $cx + 5 ; $cpy = $cy + 115 ; $h = size($lsc) * 36 ;
windowPref -e -width 120 -height $h -topLeftCorner $cpy $cpx win_GoC ;
showWindow win_GoC ;


$cpx = $cx - 150 ; $cpy = $cy -240 ;
windowPref -e  -width 200 -height 40 -topLeftCorner $cpy $cpx win_GoS ;
showWindow win_GoS ;


$cpx = $cx - 265 ; $cpy = $cy -250 ;
windowPref -e  -width 90 -topLeftCorner $cpy $cpx win_GoOs ;
showWindow win_GoOs ;


$cpx = $cx + 3 ; $cpy = $cy +3 ;
windowPref -e  -width 90 -topLeftCorner $cpy $cpx win_GoSet ;
showWindow win_GoSet ;
}

//================ center block ==============

global proc as_beConstraint(int $t,int $ro,int $s){
 $sl = ` ls -sl `; $sll = ` ls -l -sl `;
 for($i=0;$i<size($sll);$i++){
  $loc = ` spaceLocator -name ($sl[$i]+"_pin") ` ;
  matchTransform $loc $sl[$i] ;
  if($t==1) pointConstraint -offset 0 0 0 -weight 1 $loc $sll[$i] ;
  if($ro==1) orientConstraint -offset 0 0 0 -weight 1 $loc $sll[$i] ;
 }
 select -r $sll ;
}


global proc as_selIoPut(int $method){
 $sl = ` ls -selection -long ` ;
 $cb = ` channelBox -q -selectedMainAttributes mainChannelBox ` ;
 string $get[] ;
 clear $get ;
 for($x in $sl){
  for($y in $cb){
   if (`attributeExists $y $x`){
    $s = ` listConnections -source 1 -destination 0 -skipConversionNodes 1  ($x+"."+$y) ` ;
    $d = ` listConnections -source 0 -destination 1 -skipConversionNodes 1  ($x+"."+$y) ` ;
    if($method==0) $get = stringArrayCatenate($get,$s) ;
    if($method==1) $get = stringArrayCatenate($get,$d) ;
   }
  }
 }
 select -r $get ;
}


global proc as_constrainSource(){
 $sel = `ls -selection -long` ;
 $aList = {"translateX","translateY","translateZ","rotateX","rotateY","rotateZ","scaleX","scaleY","scaleZ"} ;
 string $tList[] ; clear $tList ;
 
 for($x in $sel){
  for($a in $aList){
   $lc = ` listConnections -source 1 -destination 0 -skipConversionNodes 1 -type "constraint" ($x+"."+$a) ` ;
   if(size($lc)>0){
    $lt = ` listConnections -source 1 -destination 0 -type "transform" -exactType 0 ($lc[0]+".target") ` ;
    $tList[size($tList)] = $lt[0] ;
   }
  }
 }
 $tList = stringArrayRemoveDuplicates($tList) ;
 select -r $tList ;
}


global proc as_delConstrain(){
 $sl = ` ls -sl `; 
 //$lr = ` listRelatives -children -type "constraint" $sl[size($sl)-1] ` ;
 for($x in $sl){
  $lr = ` listRelatives -children -type "constraint" $x ` ;
  delete $lr ;
 }
}


global proc as_swapArtSkin(){
 $r = ` artAttrCtx -q -useColorRamp artAttrSkinContext ` ;
 $c = ` artAttrCtx -q -colorfeedback artAttrSkinContext ` ;
 if($r==0&&$c==1){
  artAttrCtx -e -useColorRamp 1 -colorfeedback 1 artAttrSkinContext ;
 }else if($r==1&&$c==1){
  artAttrCtx -e -useColorRamp 0 -colorfeedback 0 artAttrSkinContext ;
 }else{
  artAttrCtx -e -useColorRamp 0 -colorfeedback 1 artAttrSkinContext ;
 }
}


global proc as_animKey(string $method){
 select -r `ls -type "animCurve"`;
 select -tgl `ls -type "animCurveUA"`;
 select -tgl `ls -type "animCurveUL"`;
 select -tgl `ls -type "animCurveUT"`;
 select -tgl `ls -type "animCurveUU"`;  
 if($method=="obj"){
  $sl = ` ls -selection ` ;
  string $co[] ;
  for($x in $sl){
   $lc = ` listConnections($x+".output") ` ;
   $co[size($co)] = $lc[0] ;
  }
  string $rco[] = stringArrayRemoveDuplicates($co);
  select -replace $rco ;
 }
}


global proc as_sameName(){
 $slnow = ` ls -long -sl ` ;
 $sl = ` ls -dag` ;
 select -cl ;
 $i = 0 ;
 while($i<size($sl)){
  string $ary[] ;
  clear $ary ;
  $ary = stringToStringArray($sl[$i], "|");
  if(size($ary)>1) select -tgl $sl[$i] ;
   $i++;
 }
 $s = size(`ls -sl`);
 if($s==0){
  print "Have no same name nodes." ;
  select $slnow ;
 }else{
  warning ("There are "+$s+" have same name.") ;
 }
}


global proc as_delPose(){
 $bp = ` ls -type dagPose ` ;
 delete ` ls -type dagPose ` ;
 $pm = "" ;
 for($x in $bp) $pm = $pm + $x + " " ;
 $pm = $pm + "been delete." ;
 print $pm ;
 nodeIconButton -e -enable 0 ashBtn_dbp ;
}


global proc as_turtleLayer(){
 if(`pluginInfo -q -l "Turtle.mll"`){
  unloadPlugin -f "Turtle.mll";
  for($unk in `ls "Turtle*"`){lockNode -l 0 $unk;delete $unk;}
 }
}


global proc as_delImobj(){
 $mio = ` ls -intermediateObjects -type "mesh" -type "nurbsCurve" -type "nurbsSurface" ` ;
 $i = 0 ;
 while($i<size($mio)){
  $lc = ` listConnections -skipConversionNodes true $mio[$i] ` ;
  if(size($lc)!=0){ stringArrayRemoveAtIndex($i,$mio); $i--; }
  $i++ ;
 }
 if(size($mio)==0){
  print ("There are no disconnection intermediate objects.") ;
 }else{
  delete $mio ;
  warning ("Delete " + size($mio) + " disconnection intermediate objects.") ;
 }
}


global proc as_delUnknown(){
 $ukn = ` ls -type unknown ` ;
 if(size($ukn)>0){
  $sn = ` sets -name "set_unknownNode" $ukn ` ;
  for($x in $ukn){
   $l = ` lockNode -q -lock $x ` ;
   if($l[0]==1) lockNode -lock 0 $x ;
  warning ("Create a " + $sn) ;
  }
 }else{
   print "There is no unknown node." ;
 }
}

global proc as_findLockNormal(){
 $am = `ls -type mesh` ;
 string $lm[] ; clear $lm ;
 if(size($am)>0){
  for($x in $am ){
   $vna = ` polyEvaluate -vertex $x ` ;
   int $vn = $vna[0] ;
   $pnpv = `polyNormalPerVertex -q -allLocked ($x+".vtx[0:"+($vn-1)+"]")` ;
   print $pnpv[0] ;
   if($pnpv[0]==1) $lm[size($lm)] = $x ;
  }
 }
 select -r $lm ;
}

global proc as_getMetarial(){
  	string $shapes[] = ls("-o", "-dag", "-s", (`ls -sl`));
  	string $shadingEngines[] = listConnections("-type","shadingEngine", $shapes);
  	string $materials[] = ls("-mat", listConnections($shadingEngines));
	select -r $materials ;
}

global proc as_printThickness(){
 $an = `ls -type nCloth` ;
 $msg = "" ;
 for($x in $an){
  $t = `getAttr ($x+".thickness")` ;
  $msg = $msg + $x + " thickness " + $t + "   \n" ;
 }
 print $msg ;
}

global proc as_transValue(int $t[],int $ro,int $s){
 $sl = `ls -selection -long` ;
 if($t[0]==1){
  setAttr ($sl[1]+".tx") (`getAttr ($sl[0]+".tx")`*$t[1]) ;
  setAttr ($sl[1]+".ty") (`getAttr ($sl[0]+".ty")`*$t[2]) ;
  setAttr ($sl[1]+".tz") (`getAttr ($sl[0]+".tz")`*$t[3]) ;
 }
 if($ro==1){
  setAttr ($sl[1]+".rx") (`getAttr ($sl[0]+".rx")`) ;
  setAttr ($sl[1]+".ry") (`getAttr ($sl[0]+".ry")`) ;
  setAttr ($sl[1]+".rz") (`getAttr ($sl[0]+".rz")`) ;
  if (`attributeExists "jointOrientX" $sl[1]`) setAttr ($sl[1]+".jointOrientX") (`getAttr ($sl[0]+".jointOrientX")`) ;
  if (`attributeExists "jointOrientY" $sl[1]`) setAttr ($sl[1]+".jointOrientY") (`getAttr ($sl[0]+".jointOrientY")`) ;
  if (`attributeExists "jointOrientZ" $sl[1]`) setAttr ($sl[1]+".jointOrientZ") (`getAttr ($sl[0]+".jointOrientZ")`) ;
 }
 if($s==1){
  setAttr ($sl[1]+".sx") (`getAttr ($sl[0]+".sx")`) ;
  setAttr ($sl[1]+".sy") (`getAttr ($sl[0]+".sy")`) ;
  setAttr ($sl[1]+".sz") (`getAttr ($sl[0]+".sz")`) ;
 }
}


global proc as_matrixCons(int $m){
 if(`pluginInfo -query -loaded matrixNodes`){
 }else{ loadPlugin matrixNodes; }
 
 $sl = ` ls -long -sl ` ;
 if(size($sl)>=2){
  $sl0a = stringToStringArray($sl[0], "|");
  $sl0n = $sl0a[size($sl0a)-1] ;
  
  $dm = ("xCons_"+$sl0n) ;
  $lc = ` listConnections -type decomposeMatrix ($sl[0]+".worldMatrix") ` ;
  if(size($lc)>0) $dm = $lc[0] ;
  else{
   $dm = ` createNode -n ("xCons_"+$sl0n) -skipSelect decomposeMatrix ` ;
   if($m==0) connectAttr -f ($sl[0]+".worldMatrix[0]") ($dm+".inputMatrix") ;
   else if($m==1) connectAttr -f ($sl[0]+".matrix") ($dm+".inputMatrix") ;
  }
  $i = 1 ;
  while($i<size($sl)){
   connectAttr ($dm+".outputTranslate") ($sl[$i]+".translate") ;
   connectAttr ($dm+".outputRotate") ($sl[$i]+".rotate") ;
   connectAttr ($dm+".outputScale") ($sl[$i]+".scale") ;
   connectAttr ($dm+".outputShear") ($sl[$i]+".shear") ;
  $i++;
  }
 }
 select -r $sl ;
 select -d $sl[0] ;
}


global proc as_matrixSpace(){
 $sl = ` ls -sl ` ;
 $sll = ` ls -l -sl ` ;
 $i = 1 ;
 while($i<size($sl)){
  $ms = 0 ;
  if(`getAttr -settable ($sll[$i]+".translateX")`) $ms++ ;
  if(`getAttr -settable ($sll[$i]+".translateY")`) $ms++ ;
  if(`getAttr -settable ($sll[$i]+".translateZ")`) $ms++ ;
  if(`getAttr -settable ($sll[$i]+".rotateX")`) $ms++ ;
  if(`getAttr -settable ($sll[$i]+".rotateY")`) $ms++ ;
  if(`getAttr -settable ($sll[$i]+".rotateZ")`) $ms++ ;
  if(`getAttr -settable ($sll[$i]+".scaleX")`) $ms++ ;
  if(`getAttr -settable ($sll[$i]+".scaleY")`) $ms++ ;
  if(`getAttr -settable ($sll[$i]+".scaleZ")`) $ms++ ;
  if(`getAttr -settable ($sll[$i]+".shearXY")`) $ms++ ;
  if(`getAttr -settable ($sll[$i]+".shearXZ")`) $ms++ ;
  if(`getAttr -settable ($sll[$i]+".shearYZ")`) $ms++ ;
  if($ms==12){
   $p = ` listRelatives -parent $sll[$i] ` ;
   parent $sll[$i] $sll[0] ;
   $nsl = ` ls -sl -long ` ;
   makeIdentity -apply 1 -translate 1 -rotate 1 -scale 1 $nsl[0] ;
   if(size($p[0])==0) parent -world $nsl[0] ;
   else parent $nsl[0] $p[0] ;
   setAttr ($sll[$i]+".rotatePivotX") (`getAttr ($sll[0]+".rotatePivotX")`) ;
   setAttr ($sll[$i]+".rotatePivotY") (`getAttr ($sll[0]+".rotatePivotY")`) ;
   setAttr ($sll[$i]+".rotatePivotZ") (`getAttr ($sll[0]+".rotatePivotZ")`) ;
   setAttr ($sll[$i]+".rotatePivotTranslateX") (`getAttr ($sll[0]+".rotatePivotTranslateX")`) ;
   setAttr ($sll[$i]+".rotatePivotTranslateY") (`getAttr ($sll[0]+".rotatePivotTranslateY")`) ;
   setAttr ($sll[$i]+".rotatePivotTranslateZ") (`getAttr ($sll[0]+".rotatePivotTranslateZ")`) ;
   setAttr ($sll[$i]+".scalePivotX") (`getAttr ($sll[0]+".scalePivotX")`) ;
   setAttr ($sll[$i]+".scalePivotY") (`getAttr ($sll[0]+".scalePivotY")`) ;
   setAttr ($sll[$i]+".scalePivotZ") (`getAttr ($sll[0]+".scalePivotZ")`) ;
   setAttr ($sll[$i]+".scalePivotTranslateX") (`getAttr ($sll[0]+".scalePivotTranslateX")`) ;
   setAttr ($sll[$i]+".scalePivotTranslateY") (`getAttr ($sll[0]+".scalePivotTranslateY")`) ;
   setAttr ($sll[$i]+".scalePivotTranslateZ") (`getAttr ($sll[0]+".scalePivotTranslateZ")`) ;
  }else print ("Transform "+$sl[$i]+" 's attribute cann't settable.") ;
  $i++;
 }
 select -r $sll ;
}

global proc as_connectMesh(){
 $ls = ` ls -sl ` ;
 $s0 = ` listRelatives -shapes $ls[0] ` ;
 $s1 = ` listRelatives -shapes $ls[1] ` ;
 
 if(size($s0)>0&&size($s1)>0){
  $sourceMesh = $s0[0] ;
  $targetMesh = $s1[0] ;
  $s1ni = ` listRelatives -shapes -noIntermediate $ls[1]` ;
  $s1i = stringArrayRemoveExact($s1ni,$s1) ;
  if(size($s1i)>0){
   for($x in $s1i){
	$lc = ` listConnections -skipConversionNodes true $x ` ;
	if(size($lc)>0) $targetMesh = $x ;
   }
  }
  connectAttr ($sourceMesh+".outMesh") ($targetMesh+".inMesh") ;
  print ($sourceMesh+".outMesh connect to "+$targetMesh+".inMesh") ;
 }
}

//================ upper right block ==============

global proc as_selectInf(){
 string $ja[] ;
 clear $ja ;
 $sl = ` ls -long -selection ` ;
 for($x in $sl){
  $j = ` skinCluster -q -inf $x ` ;
  $ja = stringArrayCatenate($ja,$j) ;
 }
 $ja = stringArrayRemoveDuplicates($ja) ;
 select -r $ja ;
}

//================ top block ==============

global proc as_camPref(){
 $fw = `getPanel -withFocus` ;
 $cam = ` modelPanel -q -camera $fw ` ;
 $camS = ` listRelatives -shapes $cam ` ;
 setAttr ($camS[0]+".focalLength",50) ;
 setAttr ($camS[0]+".overscan",1) ;
}

global proc as_nfClip(int $n){
 $fw = `getPanel -withFocus` ;
 $cam = ` modelPanel -q -camera $fw ` ;
 $camS = ` listRelatives -shapes $cam ` ;
 $near = ` getAttr($camS[0]+".nearClipPlane") ` ;
 $far = ` getAttr($camS[0]+".farClipPlane") ` ;
 if($n==0){
  $near = $near * 10 ;
  $far = $far * 10 ;
 }else if($n==1){
  $near = $near * 0.1 ;
  $far = $far * 0.1 ;
 }
 setAttr($camS[0]+".nearClipPlane",$near) ;
 setAttr($camS[0]+".farClipPlane",$far) ;
}

global proc as_resetUiPos(){
 python("lsUi = cmds.lsUI (windows=True)");
 python("lsUi.remove('MayaWindow')");
 python("lsUi.remove('win_ConsG')");
 python("lsUi.remove('win_DeG')");
 python("lsUi.remove('win_GoS')");
 python("lsUi.remove('win_GoOs')");
 python("lsUi.remove('win_GoSet')");
 python("lsUi.remove('win_GoC')");
 python("for x in lsUi : cmds.window(x,e=1,topLeftCorner=[100,100])");
}

global proc as_abcRange(){
 $abc = ` ls -type "AlembicNode" ` ;
 python("sf=[]") ; python("ef=[]") ;
 if(size($abc)>0){
  for($x in $abc){
   python("sf.append(cmds.getAttr('"+$x+".startFrame'))");
   python("ef.append(cmds.getAttr('"+$x+".endFrame'))");
  }
  $sf = python("min(sf)") ;
  $ef = python("max(ef)") ;
  playbackOptions -minTime $sf ;
  playbackOptions -maxTime $ef ;
 }
}

//================ left block ==============

global proc as_copyPivot(){
 $sl = ` ls -sl ` ;
 $i = 1 ;
 if(size($sl)>=2){
  while($i<size($sl)){
   $x= ` xform -q -worldSpace -rotatePivot $sl[0] ` ;
   xform -worldSpace -rotatePivot $x[0] $x[1] $x[2] $sl[$i] ;
   xform -worldSpace -scalePivot $x[0] $x[1] $x[2] $sl[$i] ;
   $i++;
  }
 }else print "Select two or more transform." ;
}

global proc as_trans(string $so,string $sr){
 $sl = ` ls -sl ` ;
 $sll = ` ls -l -sl ` ;
 $i = 0 ;
 while($i<size($sl)){
  $p = ` listRelatives -parent $sll[$i] ` ;
  $tn = "trans_"+$sl[$i] ;
  if($so!="" && $sr!=""){
   string $si = $sl[$i] ;
   $tn = `substitute $so $si $sr` ;
  }
  //if(startString($sl[$i],5) == "ctrl_"){
  // $s = `size($sl[$i])` ;
  // $e = endString($sl[$i],$s-5) ;
  // $tn = ("ctrlTrans_"+$e) ;
  //}
  $t = ` createNode -name $tn -parent $sll[$i] transform ` ;
  if(size($p)==0){
   $pc = ` ls -l -assemblies ` ;
   $j = 0 ;
   while($j<size($pc) && $pc[$j]!=$sll[$i]) $j++ ;
   parent -world $t ;
   reorder -f $t ;
   reorder -r $j ;
  }else{
   $pc = ` listRelatives -children -fullPath $p[0] ` ;
   $j = 0 ;
   while($j<size($pc) && $pc[$j]!=$sll[$i]) $j++ ;
   parent $t $p[0] ;
   reorder -f $t ;
   reorder -r $j ;
  }
  parent $sll[$i] $t ;
  $i++ ;
}}

global proc as_moveToLook(){
 $fw = `getPanel -withFocus` ;
 $cam = ` modelPanel -q -camera $fw ` ;
 $sll = ` ls -l -sl ` ;
 $t = ` createNode -parent $cam -skipSelect transform ` ;
 setAttr ($t+".tz") -50 ;
 matchTransform -position $sll[0] $t ;
 delete $t ;
}

global proc as_createJoint(){
 $sl = ` ls -sl ` ;
 $sll = ` ls -l -sl ` ;
 if(size($sll)==0){
  $tr = `createNode transform` ;
  createNode -p $tr joint ;
  select -r $tr ; 
 }else{
  $i = 0 ;
  while($i<size($sl)){   
   $jn = ` createNode -name ($sl[$i]+"JT") joint -parent $sll[$i] ` ;
   $nt = `nodeType $sll[$i]`;
   if($nt=="joint"){
    $jr = `getAttr ($sll[$i]+".radius")`;
	print $jr ;
	setAttr ($jn+".radius") $jr ;
   }
   $i++;
  }
 }
}

global proc as_orderID(){
 $sll = ` ls -l -sl ` ;
 if(size($sll)>0){
  for($x in $sll){
   if (`attributeExists "orderID" $x`==0) {
    addAttr -longName "orderID" -keyable true $x ;
   }else print "Already exist." ;
  }
 }else print "No selection." ;
}

global proc as_posLocator(){
 $sll = ` ls -l -sl ` ;
 for($x in $sll){
  $t = ` xform -q -translation -worldSpace $x ` ;
  $loc = ` spaceLocator`  ;
  move -absolute $t[0] $t[1] $t[2] $loc ;
 }
}

global proc as_pureDupli(){
 $sl = ` ls -selection -long ` ;
 for($x in $sl){
  $s = ` listRelatives -shapes $x ` ;
  $ds = $s[0] ;
  for($y in $s){
   if(`getAttr ($y+".intermediateObject")`){
     $ds = $y ;
   }
  }
  $dr = ` duplicate $ds ` ;
  if($ds!=$s[0]){
   $ns = ` listRelatives -shapes $dr ` ;
   int $ion = 0 ;
   for($y in $ns){
    if(`getAttr ($y+".intermediateObject")`){
     setAttr ($y+".intermediateObject") 0 ;
     sets -e -forceElement initialShadingGroup $y ;
     $ra[0] = $y ;
     $ns = stringArrayRemove($ra,$ns);
     $ion++ ;
    }
   }
   if($ion>0) delete $ns ;
  }
  select -r $dr ;
 }
}

global proc as_duplucateConnect(){
 $sl = ` ls -long -selection ` ;
 string $dl[] ;
 for($x in $sl){
  $nt = ` nodeType $x `;
  if($nt=="transform"){
   $lr = ` listRelatives -shapes -fullPath -noIntermediate $x ` ;
   $snt = ` nodeType $lr[0] `;
   if($snt=="mesh"){
    $d = ` polyDuplicateAndConnect $x ` ;
    $dl[size($dl)] = $d[0] ;
   }else if($snt=="nurbsCurve"){
    $d = ` duplicate $x ` ;
        $ds = ` listRelatives -shapes -fullPath -noIntermediate $d ` ;
        connectAttr ($lr[0]+".worldSpace[0]") ($ds[0]+".create") ;
    //$dl[size($dl)] = $d[0] ;
   }
  }else if($nt=="mesh"){
   $d = ` polyDuplicateAndConnect $x ` ;
   $dl[size($dl)] = $d[0] ;
  }
 }
 select -replace $dl ;
}

global proc as_smoothBindSkin(){
 $sl = ` ls -selection -long ` ;
 string $jo[] ;
 string $inf[] ;
 string $geo[] ;
 string $bdo[] ; // binded object
 for($x in $sl){ 
  $nt = ` nodeType $x ` ;
  if($nt=="transform"){
   $s = ` listRelatives -shapes -noIntermediate $x ` ;
   if(size($s)>0){
    $snt = ` nodeType $s[0] ` ;
	if($snt=="mesh"||$snt=="nurbsCurve"||$snt=="nurbsSurface"){
     $geo[size($geo)] = $s[0] ;
     $bdo[size($bdo)] = $x ;
	}
	if($snt=="locator") $inf[size($inf)] = $x ;
   }else{
	$inf[size($inf)] = $x ;
   }
  }
  if($nt=="joint") $jo[size($jo)] = $x ;
 }
 for($x in $geo){
  if(size($jo)>0){
   $sk = ` skinCluster -bindMethod 0 -dropoffRate 12.0 -maximumInfluences 4 -skinMethod 0 -toSelectedBones -ignoreBindPose -removeUnusedInfluence false -normalizeWeights 1 $jo $x ` ;
   if(size($inf)>0) skinCluster -e -addInfluence $inf -weight 0 $sk ;
  }
  //-ignoreSelected -toSkeletonAndTransforms -toSelectedBones
 }
 if(size($geo)>0) select -replace $bdo ;
}

global proc as_rebind(){
 $sl = ` ls -selection ` ;
 $sll = ` ls -selection -long ` ;
 $i = 0 ;
 while($i<size($sl)){
  $sk = ` findRelatedSkinCluster($sl[$i]) ` ;
  setAttr ($sk+".envelope") 0 ;
  duplicate -name "temporaryRebindModel" $sll[$i] ; 
  $ski = ` skinCluster -q -influence $sk ` ;
  $sk2 = ` skinCluster -toSelectedBones $ski "temporaryRebindModel" ` ;
  copySkinWeights -ss $sk -ds $sk2 -influenceAssociation "name" -noMirror ; 
  skinCluster -e -unbind $sll[$i] ;
  delete ` ls -type "dagPose" ` ;
  
  python("idJo = {}") ;
  string $nski[] ;
  $j = 0 ;
  while($j<size($ski)){
   if (`attributeExists "orderID" $ski[$j]`){
	$idv = ` getAttr ($ski[$j]+".orderID") ` ;
	python("idJo['"+$ski[$j]+"'] = "+$idv+" ") ;
   }else $nski[size($nski)] = $ski[$j] ;
   $j++;
  }
  python("idJo = sorted(idJo.items(), key=lambda x:x[1])") ;
  python("sIdJo = []") ;
  python("for x in idJo : sIdJo.append(x[0])") ;
  $sIdJo = python("sIdJo") ;
  $nski = stringArrayCatenate($sIdJo,$nski);
  
  $sk3 = ` skinCluster -toSelectedBones $nski $sll[$i] ` ;
  copySkinWeights -ss $sk2 -ds $sk3  -influenceAssociation "name" -noMirror ;
  delete "temporaryRebindModel" ;
  $i++;
 }
}

global proc as_cluster(int $mode){
 $ls = `ls -sl -fl` ;
 $mn = stringToStringArray($ls[0],".[") ;
 if(size($mn)<3){
  if($mode==1) cluster -relative ;
  if($mode==2) for($x in `ls -sl`) cluster -relative $x ;
 }
 else{
  if(`softSelect -q -softSelectEnabled`) as_softCluster ;
  else cluster -relative ;
 }
}

global proc as_softCluster(){
 $cmd = "import maya.OpenMaya as om \n"
 
 +"selection = cmds.ls(sl=True) \n"
 +"richSel = om.MRichSelection() \n"
 +"om.MGlobal.getRichSelection(richSel) \n"
 +"richSelList = om.MSelectionList() \n"
 +"richSel.getSelection(richSelList) \n"
 
 +"cluster = cmds.cluster( rel=True ) \n"
 +"cmds.setAttr(cluster[1]+'.rotate',lock=1) \n"
 +"cmds.setAttr(cluster[1]+'.scale',lock=1) \n"
 +"cmds.setAttr(cluster[1]+'.v',keyable=0,cb=1) \n"
 +"clusterSet = cmds.listConnections( cluster, type=\"objectSet\" ) \n"
 
 +"for i,x in enumerate(selection) : \n"
 +" path = om.MDagPath() \n"
 +" component = om.MObject() \n"
 +" richSelList.getDagPath(i, path, component) \n"
 +" componentFn = om.MFnSingleIndexedComponent(component) \n"
 
 +" for ii in range(0,componentFn.elementCount()): \n"
 +"  weight = componentFn.weight(ii) \n"
 +"  v = componentFn.element(ii) \n"
 +"  w = weight.influence() \n"
 +"  sel = x.split('.') \n"
 +"  pn = sel[1].split('[')[0] \n" // point name
 +"  vtx = (sel[0]+'.'+pn+'['+str(v)+']') \n"
 +"  cmds.sets(vtx, add=clusterSet[0]) \n" // trun off component ID in 2022
 +"  cmds.percent(cluster[0], vtx,  v=w ) \n"
 
 +"cmds.select(cluster[1])" ;
 
 python($cmd) ;
}

global proc as_reorderHistory(int $od){
 $sl = ` ls -selection ` ;
 for($x in $sl){
  $his = ` listHistory -interestLevel 1 -pruneDagObjects 1 $x ` ;
  reorderDeformers $his[$od] $his[$od-1] $x ;
 }
 select -replace $sl ;
}

global proc int as_copySkinCluster(){
 $sl = ` ls -sl ` ;
 if(size($sl)==0){ print "No selection"; return 0 ;}
 $skn = findRelatedSkinCluster($sl[0]) ;
 if($skn == ""){ print "No skinCluster"; return 0 ;}
 $infs = ` skinCluster -q -influence $skn` ;
 $ds = ` skinCluster -normalizeWeights 1 -removeUnusedInfluence 0 -toSelectedBones $infs $sl[1] ` ;
 copySkinWeights -sourceSkin $skn -destinationSkin $ds -noMirror -surfaceAssociation "closestPoint" -influenceAssociation "name" ;
 return 0 ;
}

global proc as_mirrorPoint(int $m){
 $ls = `ls -selection -long` ;
 if(size($ls)==1){
  $s = ` listRelatives -shapes -noIntermediate $ls[0] ` ;
  if(size($s)==1){
   $nt = ` nodeType $s[0] `;
   if($nt=="mesh"){
	$vna = ` polyEvaluate -vertex $s[0] ` ;
	int $vn = $vna[0] ;
	while($vn--){
	 $v = $s[0] + ".vtx[" + $vn + "]" ;
	 $x = ` xform -q -objectSpace -t $v ` ;
	 if($m==1) $x = ` xform -q -worldSpace -t $v ` ;
	 if($m==0) xform -os -t ($x[0]*-1) $x[1] $x[2] $v ;
	 if($m==1) xform -ws -t ($x[0]*-1) $x[1] $x[2] $v ;
	}
   }
   if($nt=="nurbsCurve"){
	int $vn = `getAttr($s[0]+".spans")` + `getAttr($s[0]+".degree")` ;
	while($vn--){
	 $v = $s[0] + ".cv[" + $vn + "]" ;
	 $x = ` xform -q -objectSpace -t $v ` ;
	 if($m==1) $x = ` xform -q -worldSpace -t $v ` ;
	 if($m==0) xform -os -t ($x[0]*-1) $x[1] $x[2] $v ;
	 if($m==1) xform -ws -t ($x[0]*-1) $x[1] $x[2] $v ;
	}
   }
  }else{
   warning "Have more than one shapes or no shape." ;
  }
 }else if(size($ls)==2){
  $s0 = ` listRelatives -shapes $ls[0] ` ;
  $s1 = ` listRelatives -shapes $ls[1] ` ;
  if(size($s0)==1){
   $nt = ` nodeType $s0[0] `;
   print $nt ;
   if($nt=="nurbsCurve"){
	$vn = `getAttr ($s0[0]+".spans") ` + `getAttr ($s0[0]+".degree") ` ;
	$i = 0 ;
	while($i<$vn){
     $v0 = $s0[0] + ".controlPoints[" + $i + "]" ;
     $v1 = $s1[0] + ".controlPoints[" + $i + "]" ;
	 $xv = getAttr ($v0+".xValue") ; $yv = getAttr ($v0+".yValue") ; $zv = getAttr ($v0+".zValue") ;
	 setAttr ($v1+".xValue") ($xv*-1) ;
	 setAttr ($v1+".yValue") $yv ;
	 setAttr ($v1+".zValue") $zv ;
     $i++ ;
	}
   }
  }
 }
}

global proc as_cancelImo(){
 $sl = ` ls -selection ` ;
 for($x in $sl){
  if(`attributeExists "intermediateObject" $x`){
   setAttr ($x+".intermediateObject",0) ;
  }
 }
}

global proc as_transMaterial(){
 $sl = `ls -selection -long ` ;
 $nt = ` nodeType $sl[0] ` ;
 $sp = ` listRelatives -shapes -path $sl[0] ` ;
 $transAttr = {".overrideEnabled",".overrideColor",".overrideRGBColors",".overrideColorR",".overrideColorG",".overrideColorB"} ;
 if(size($sp)>0) $nt = ` nodeType $sp[0] ` ;
 if($nt=="mesh"||$nt=="nurbsSurface"){
  $sg = ` listConnections -type shadingEngine $sp[0] ` ;
  stringArrayRemoveAtIndex(0,$sl);
  for($x in $sl) sets -e -forceElement $sg $x ; 
 }else if($nt=="nurbsCurve"||$nt=="locator"){
  $oe = ` getAttr ($sp[0]+".overrideEnabled") ` ;
  $oi = ` getAttr ($sp[0]+".overrideColor") ` ;
  $oc = ` getAttr ($sp[0]+".overrideRGBColors") ` ;
  $or = ` getAttr ($sp[0]+".overrideColorR") ` ;
  $og = ` getAttr ($sp[0]+".overrideColorG") ` ;
  $ob = ` getAttr ($sp[0]+".overrideColorB") ` ;
  for($x in $sl){
   $tsp = ` listRelatives -shapes -path $x ` ;
   for($y in $tsp){
    setAttr ($y+".overrideEnabled") $oe ;
    setAttr ($y+".overrideColor") $oi ;
    setAttr ($y+".overrideRGBColors") $oc ;
    setAttr ($y+".overrideColorR") $or ;
    setAttr ($y+".overrideColorG") $og ;
    setAttr ($y+".overrideColorB") $ob ;
   }
  }
 }else if($nt=="joint"){
  $oe = ` getAttr ($sl[0]+".overrideEnabled") ` ;
  $oi = ` getAttr ($sl[0]+".overrideColor") ` ;
  $oc = ` getAttr ($sl[0]+".overrideRGBColors") ` ;
  $or = ` getAttr ($sl[0]+".overrideColorR") ` ;
  $og = ` getAttr ($sl[0]+".overrideColorG") ` ;
  $ob = ` getAttr ($sl[0]+".overrideColorB") ` ;
  for($x in $sl){
   setAttr ($x+".overrideEnabled") $oe ;
   setAttr ($x+".overrideColor") $oi ;
   setAttr ($x+".overrideRGBColors") $oc ;
   setAttr ($x+".overrideColorR") $or ;
   setAttr ($x+".overrideColorG") $og ;
   setAttr ($x+".overrideColorB") $ob ;
  }
 }
}

global proc string as_nodeType(string $node){
 if(`nodeType $node`=="transform"){
  $s = ` listRelatives -shapes $node ` ;
  if(size($s)>0){
   return ` nodeType $s[0] ` ;
  }else return "transform" ;
 }else return `nodeType $node` ;
}

global proc as_identifyNCache(){
 $sl = `ls -selection` ;
 string $systemList[] ;
 for($x in $sl){
  if(as_nodeType($x)=="nCloth") $systemList[size($systemList)]= $x ;
 }
 print $systemList ;
}

global proc as_setOrigBsKey(int $m){
 $sl = ` ls -selection ` ;
 $bs = blendShape($sl) ;
 if($m == 1) setAttr ($bs[0]+".origin") 0 ;
 $t = ` blendShape -q -target $bs ` ;
 $as = `aliasAttr -q $bs ` ;
 if(size($as)==2){
  $attr = $bs[0]+"."+$as[0] ;
  if($m == 0) setAttr $attr 1 ;
  if($m == 2){
   $ti = ` playbackOptions -q -minTime ` ;
   $ta = ` playbackOptions -q -maxTime ` ;
   setKeyframe -time $ti -value 1 $attr ;
   setKeyframe -time $ta -value 0 $attr ;
  }
 }
}

//================ right block ==============

global proc as_setTestKey(){
 $sl = ` ls -sl ` ;
 $ti = ` playbackOptions -q -minTime ` ;
 $ta = ` playbackOptions -q -maxTime ` ;
 $i = 0 ;
 while($i<size($sl)){
  $cb = ` channelBox -q -selectedMainAttributes mainChannelBox ` ;
  if(size($cb)==0) $cb = `listAttr -keyable $sl[$i] `;
  $j = 0 ;
  while($j<size($cb)){
   string $at =  ($sl[$i] + "." + $cb[$j]) ;
   $aType = ` getAttr -type $at ` ;
   if($aType!="enum"&&$aType!="bool"){
    string $pa = "asuei" ;
    if($cb[$j]=="translateX"||$cb[$j]=="tx") $pa = "dtx" ;
    if($cb[$j]=="translateY"||$cb[$j]=="ty") $pa = "dty" ;
    if($cb[$j]=="translateZ"||$cb[$j]=="tz") $pa = "dtz" ;
    if($cb[$j]=="rotateX"||$cb[$j]=="rx") $pa = "preferredAngleX" ;
    if($cb[$j]=="rotateY"||$cb[$j]=="ry") $pa = "preferredAngleY" ;
    if($cb[$j]=="rotateZ"||$cb[$j]=="rz") $pa = "preferredAngleZ" ;
    $atv = ` getAttr $at `;
    float $apv = 0.0 ; 
    if(`attributeExists $pa $sl[$i]`) $apv = ` getAttr ($sl[$i] + "." + $pa) ` ;
    else if($aType=="double") $apv = 1 ;
    setKeyframe -time $ti -value $apv $at ;
    setKeyframe -time $ta -value $atv $at ;
   }
   $j++;
  }
  $i++;
 }
 currentTime $ta ;
}

global proc as_attrZero(int $method){
 $sl = ` ls -l -sl ` ;
 $i = 0 ; 
 while($i<size($sl)){
  $cb = ` channelBox -q -selectedMainAttributes mainChannelBox ` ;
  if(size($cb)==0) $cb = `listAttr -keyable -unlocked $sl[$i] `;
  $j = 0 ;
  while($j<size($cb)){
   string $attr = $sl[$i] + "." + $cb[$j] ;
   $attrType = ` getAttr -type $attr ` ;
   $value = 0.0 ;
   $ate = ` addAttr -q -exists $attr ` ;
   if($ate==1){
    $adv = ` addAttr -q -defaultValue $attr ` ;
    $value = $adv ;
   }else{
    if($attrType=="doubleLinear" || $attrType=="doubleAngle"){
     if($method==-1){
      $value = 0 ;
      if($cb[$j]=="translateX"||$cb[$j]=="tx"){
           if(`attributeExists "dtx" $sl[$i]`) $value=`getAttr($sl[$i]+".dtx")`;
          }
      if($cb[$j]=="translateY"||$cb[$j]=="ty"){
           if(`attributeExists "dty" $sl[$i]`) $value=`getAttr($sl[$i]+".dty")`;
          }
      if($cb[$j]=="translateZ"||$cb[$j]=="tz"){
           if(`attributeExists "dtz" $sl[$i]`) $value=`getAttr($sl[$i]+".dtz")`;
          }
     }else{
      $at = ` getAttr $attr ` ;
      $value = python("round("+$at+","+$method+")") ;
     }
    }
    if($attrType=="double"){
     if($method==-1) $value = 1 ;
     else{
      $at = ` getAttr $attr ` ;
      $value = python("round("+$at+","+$method+")") ;
     }
    }
    if($attrType=="bool") $value = 1 ;
   }
   setAttr $attr $value ;
   $j++;
  }
  $array = stringToStringArray($sl[$i],"|") ;
  $last = $array[size($array)-1] ;
  $rn = ` substitute "ctrl_" $last "ctrlDro_" ` ;
  if(`objExists($rn)`){
   matchTransform -rotation $sl[$i] $rn ;
  }
  $i++ ;
 }
}

global proc as_cleanKey(int $method){
 $sl = ` ls -selection -objectsOnly ` ;
 for($x in $sl){
  $ac = ` listConnections -source 1 -destination 0 -type animCurve $x ` ;
  for($y in $ac) delete($y) ;
 }
}

global proc as_attrDefault(){
 $sl = ` ls -l -sl ` ;
 $attr = {".tx",".ty",".tz",".rx",".ry",".rz",".sx",".sy",".sz",".v"} ;
 for($x in $sl){
  for($y in $attr){
   setAttr -keyable on ($x+$y) ;
   setAttr -lock off ($x+$y) ;
  }
 }
}

global proc as_zeroJointRotate(){
 $ls = `ls -sl` ;
 for($x in $ls){
  $nt = ` nodeType $x ` ;
  if($nt=="joint"){
   $p = ` listRelatives -parent $x ` ;
   $temp = ` createNode -skipSelect -parent $p[0] "transform" ` ;
   matchTransform $temp $x ;
   $ro = `getAttr ($temp+".rotate") ` ;
   setAttr ($x+".jointOrient") $ro[0] $ro[1] $ro[2] ;
   setAttr ($x+".rotate") 0 0 0 ;
   delete $temp ;
  }
 }
}

global proc as_LockAttr(){
 $sl = ` ls -sl ` ; $i = 0 ;
 while($i<size($sl)){
  $slt = ` nodeType $sl[$i] ` ;
  setAttr -l true ($sl[$i]+".translateX") ;
  setAttr -l true ($sl[$i]+".translateY") ;
  setAttr -l true ($sl[$i]+".translateZ") ;
  setAttr -l true ($sl[$i]+".rotateX") ;
  setAttr -l true ($sl[$i]+".rotateY") ;
  setAttr -l true ($sl[$i]+".rotateZ") ;
  setAttr -l true ($sl[$i]+".scaleX") ;
  setAttr -l true ($sl[$i]+".scaleY") ;
  setAttr -l true ($sl[$i]+".scaleZ") ;
  $i++;
 }
}

global proc asLockPreferOrient(){
 $sl = ` ls -sl ` ; $i = 0 ;
 while($i<size($sl)){
  $slt = ` nodeType $sl[$i] ` ;
  if($slt=="joint") setAttr -l true ($sl[$i]+".preferredAngle") ;
  if($slt=="joint") setAttr -l true ($sl[$i]+".jointOrient") ;
  $i++;
 }
}

global proc as_zeroJointOrient(){
 $ls = `ls -sl` ;
 for($x in $ls){
  $nt = ` nodeType $x ` ;
  if($nt=="joint"){
   $temp = ` createNode -skipSelect "transform" ` ;
   matchTransform $temp $x ;
   $ot = ` orientConstraint $temp $x ` ;
   setAttr ($x+".jointOrient") 0 0 0 ;
   delete $ot ;
   delete $temp ;
  }
 }
}

global proc as_quickExIm(int $i){
 $dir = ` whatIs asueiHotbox ` ;
 $dir = python("'"+$dir+"'.replace('Mel procedure found in: ','')") ;
 $dir = dirname($dir) + "/asueiHotboxExportTemp.mb" ;
 if($i==0) file -force -options "v=0;" -typ "mayaBinary" -pr -exportSelected $dir ; print ("Export to "+$dir) ;
 if($i==1)  file -import -type "mayaBinary"  -ignoreVersion -ra true -mergeNamespacesOnClash true -namespace ":" -options "v=0;"  -pr $dir ; print ("Import from "+$dir) ;
}

global proc as_selectionExIm(int $m){
 python("import json");
 $dir = ` whatIs asueiHotbox ` ;
 $dir = python("'"+$dir+"'.replace('Mel procedure found in: ','')") ;
 $dir = dirname($dir) + "/asueiHotboxExportSelection.json" ;
 python("sel = cmds.ls(selection=1)");
 if($m==0) python("with open('"+$dir+"', 'w') as f: json.dump(sel,f,ensure_ascii=False,indent=1)");
 if($m==1)
  python("with open('"+$dir+"') as f: sel = json.load(f)");
  python("cmds.select(sel,r=1)");
}

global proc as_skinWeightExIm(int $m){
 python("import json");
 $dir = ` whatIs asueiHotbox ` ;
 $dir = python("'"+$dir+"'.replace('Mel procedure found in: ','')") ;
 $dir = dirname($dir) + "/asueiHotboxExportSkinWeight.json" ;
 python("skwt = []");
 if($m==1) python("with open('"+$dir+"') as f: skwt = json.load(f)");
 $sl = ` ls -selection ` ;
 
 for($i=0;$i<size($sl);$i++){ // loop of selected objects
  python("obj = '"+$sl[$i]+"'");
  $skn = findRelatedSkinCluster($sl[$i]) ;
  python("skn = '"+$skn+"'");
  python("vInfo = []");
  if($m==1){
   python("vInfo = skwt["+$i+"]");
   python("jInf = [ x[0] for x in vInfo[0] ]");
   if($skn=="") python("skn = cmds.skinCluster(jInf,obj,toSelectedBones=1)[0]"); 
   else{
    $inf = `skinCluster -q -influence $skn`;
	$jInf = python("jInf");
	for($j=0;$j<size($jInf);$j++){
     $ci = stringArrayFind($jInf[$j],0,$inf);
	 if($ci==-1) skinCluster -e -addInfluence $jInf[$j] -weight 0 $skn ;
    }
   }
  }
  $vn = ` polyEvaluate -vertex $sl[$i] ` ; // loop of vertices
  for($j=0;$j<$vn[0];$j++){
   if($m==0){
    python("tList = cmds.skinPercent(skn,obj+'.vtx['+str("+$j+")+']',transform=None,q=1)");
    python("vList = cmds.skinPercent(skn,obj+'.vtx['+str("+$j+")+']',q=1,value=1)");
    python("vInfo.append([ (x,y) for x,y in zip(tList,vList) ])");
   }else if($m==1){
    $vName = $sl[$i]+".vtx["+$j+"]";
	if(`objExists $vName`) python("cmds.skinPercent(skn,'"+$vName+"',transformValue=vInfo["+$j+"])");
   }
  }
  if($m==0) python("skwt.append(vInfo)");
 }
 if($m==0) python("with open('"+$dir+"', 'w') as f: json.dump(skwt,f,ensure_ascii=False,indent=1)");
 print $dir ;
}

global proc int as_animExIm(int $m){
 $sl = ` ls -l -sl ` ;
 if(size($sl)==0) { print "No select." ; return 0 ; }
 $lsl = $sl[size($sl)-1] ;
 $cb = ` channelBox -q -selectedMainAttributes mainChannelBox ` ;
 if(size($cb)==0) { print "No select attribute." ; return 0 ; }
 $lcb = $cb[size($cb)-1] ;
 $an = ($lsl+"."+$lcb) ;
 
 $dir = ` whatIs asueiHotbox ` ;
 $dir = python("'"+$dir+"'.replace('Mel procedure found in: ','')") ;
 $dir = dirname($dir) + "/asueiHotboxExportAnimation.json" ;
 
 if($m==1){ // export process
  $cmd = "with open('"+$dir+"') as f: exList = json.load(f)\n" 
  +"for x in exList :\n"
  +" cmds.setKeyframe('"+$lsl+"',at='"+$lcb+"',t=x[0],v=x[1],inTangentType=x[2],outTangentType=x[3])" ;
  python($cmd) ;
  print ("Set keyframe on "+$an) ;
  return 0 ;
 }
 $lc = ` listConnections -source 1 -destination 0 -type "animCurve" $an ` ;
 if(size($lc)==0) { print "No animation key." ; return 0 ; }
 
 if($m==1) python("with open('"+$dir+"') as f: skwt = json.load(f)");
 
 $cmd = "exList = []\n"
 +"for x in cmds.keyframe('"+$lc[0]+"',q=1,indexValue=1):\n"
 +" exList.append(cmds.keyframe('"+$lc[0]+"',index=(int(x),int(x)),q=1,timeChange=1,valueChange=1))\n"
 +" exList[int(x)].append(cmds.keyTangent('"+$lc[0]+"',index=(int(x),int(x)),q=1,inTangentType=1)[0])\n"
 +" exList[int(x)].append(cmds.keyTangent('"+$lc[0]+"',index=(int(x),int(x)),q=1,outTangentType=1)[0])\n"
 +"print exList\n" 
 +"with open('"+$dir+"', 'w') as f: json.dump(exList,f,ensure_ascii=False,indent=1)" ;
 python($cmd) ;
 print ("Export to "+$dir) ;
 return 0 ;
}

global proc as_setsExIm(int $m){
 python("import json");
 $dir = ` whatIs asueiHotbox ` ;
 $dir = python("'"+$dir+"'.replace('Mel procedure found in: ','')") ;
 $dir = dirname($dir) + "/asueiHotboxExportSets.json" ;
 python("exSets = []");
 if($m==0){
  $sl = ` ls -selection ` ;
  for($i=0;$i<size($sl);$i++){ // loop of selected objects
   python("sInfo = []");
   python("obj = '"+$sl[$i]+"'");
   python("sInfo.append(obj)");
   python("member = cmds.sets('"+$sl[$i]+"',q=1)");
   python("sInfo.append(member)");
   python("exSets.append(sInfo)");
  }
  python("with open('"+$dir+"', 'w') as f: json.dump(exSets,f,ensure_ascii=False,indent=1)");
  print $dir ;
 }
 
 if($m==1){
  python("with open('"+$dir+"') as f: exSets = json.load(f)");
  python("for x in exSets : cmds.sets(x[1],name=x[0])");
 }
}

//================ camera block ==============
global proc as_cameraWindow(string $c){
 $wn = ("win_"+$c) ; // window name
 
 if(`window -exists $wn `==0){
  window $wn ;
  paneLayout ;
  modelPanel -camera $c ;
  window -e -widthHeight (`getAttr "defaultResolution.width"`) (`getAttr "defaultResolution.height"`) $wn ;
  showWindow $wn ;
 }
 
}

//================ UI block ==============

global proc as_vertexWeightCheckUI(){
 $sl = ` ls -fl -sl ` ;
 $array = stringToStringArray($sl[0],".");
 $sk = findRelatedSkinCluster($array[0]) ;
 string $aInf[] ; clear $aInf ;
 float $aInfW[] ; clear $aInfW ;
 if($sk!=""){
  $inf = ` skinCluster -q -inf $sk ` ;
  $sw = ` skinPercent -q -value $sk $sl[0] ` ;
  $i = 0 ;
  while($i<size($sw)){
   if($sw[$i]>0.0004){
    $aInf[size($aInf)] = $inf[$i] ;
    $sw[$i] = $sw[$i]*1000 ;
    $aInfW[size($aInfW)] = int($sw[$i]) *0.001 ;
   }
   $i++;
  } 
  if(`window -exists vwcw_Win`) deleteUI -window vwcw_Win ;
  window -title "Vertex Weight Check Window" -resizeToFitChildren on vwcw_Win ;
  formLayout MainForm ;
  button -label $sl[0] -command ("select -r "+$sl[0]) btn_SS ;
  separator sprt1 ;
  formLayout -edit
  -af btn_SS "top" 3
  -af btn_SS "left" 5
  -af btn_SS "right" 5
  -ac sprt1 "top" 1 btn_SS
  -af sprt1 "left" 5
  -af sprt1 "right" 5 MainForm;
  $i = 0 ;
  while($i<size($aInf)){
   button -label ($aInf[$i]+" ("+$aInfW[$i]+")") -height 30 -command ("select -r "+$aInf[$i]) ("btn_S"+$i) ;
   if($i==0) formLayout -edit -ac ("btn_S"+$i) "top" 3 sprt1 MainForm ;
   else formLayout -edit -ac ("btn_S"+$i) "top" 3 ("btn_S"+($i-1)) MainForm ;
   formLayout -edit  -af ("btn_S"+$i) "left" 5  -af ("btn_S"+$i) "right" 5 MainForm;
   $i++ ;
  }
  int $wh = 35 + size($aInf) *33 ;
  window -e -widthHeight 200 $wh vwcw_Win ;
  showWindow vwcw_Win ;
 }else{
  warning "Need to select vertex with skinCluster." ;
 }
}

global proc int as_attrSliderUI(){
 $asasWin = ` window -title "Attributes Slider" -resizeToFitChildren on ` ;
 columnLayout -columnAttach "both" 10 -rowSpacing 10 -adjustableColumn on ;
 $sls = ` ls -selection ` ;
 $sll = ` ls -selection -long ` ;
 if(size($sll)==0){ print "No selected object"; return 0 ;}
 $i = 0 ; 
 while($i<size($sls)){
  $cb = ` channelBox -q -selectedMainAttributes mainChannelBox ` ;
  if(size($cb)==0){ print "No selected attribute"; return 0 ; }
  $j = 0 ;
  while($j<size($cb)){
   $an = $sls[$i] + "." + $cb[$j] ; // attribute name
   $ran = $sll[$i] + "." + $cb[$j] ; // real attribute name
   float $v = ` getAttr $ran ` ;
   float $minV = $v - 50 ;
   float $maxV = $v + 50 ;
   if(`addAttr -q -exists $ran`){
	if(`addAttr -q -hasMinValue $ran`) $minV = ` addAttr -q -minValue $ran ` ;
	if(`addAttr -q -hasMaxValue $ran`) $maxV = ` addAttr -q -maxValue $ran ` ;
   }else{
    if(` getAttr -type $ran `=="doubleAngle") $minV = $v - 120 ; $maxV = $v + 120 ;
   }
   $sn = "fsbg_" + $sls[$i] + "_" + $cb[$j] ; // slider name
   //floatSliderButtonGrp -label $an -field true -columnAlign 2 right -value $v -min $minV -max $maxV -step (($maxV-$minV)/100) -buttonLabel "initial" -dragCommand ("setAttr "+$ran+" #1") -buttonCommand ("setAttr "+$ran+" "+$v+"; floatSliderButtonGrp -e -value "+$v+" "+$sn) $sn ;
   attrFieldSliderGrp -min $minV -max $maxV -at $ran ;
   $j++;
  }
  $i++ ;
 }
 showWindow $asasWin ; return 0 ;
}

global proc int as_paintWeightTools(){
 $sla = ` ls -long -selection ` ;
 if (size($sla)==0){ warning "No selected object"; return 0 ;}
 $sl = $sla[size($sla)-1] ;
 $gc = ` listHistory -interestLevel 1 -pruneDagObjects 0 $sl ` ;
 string $wo[] ;
 for($x in $gc){
  $nt = ` nodeType $x ` ;
  print ($nt+" ") ;
  if($nt=="skinCluster") $wo[size($wo)] = "skinCluster" ;
  if($nt=="cluster") $wo[size($wo)] = "cluster" ;
  if($nt=="textureDeformer") $wo[size($wo)] = "textureDeformer" ;
  if($nt=="blendShape") $wo[size($wo)] = "blendShape" ;
  if($nt=="deltaMush") $wo[size($wo)] = "deltaMush" ;
  if($nt=="tension") $wo[size($wo)] = "tension" ;
  if($nt=="nCloth") $wo[size($wo)] = "Input Attract" ;
  if($nt=="nCloth") $wo[size($wo)] = "Mass" ;
 }
 
 if(size($wo)>1){
  if(`window -exists asPwtWin`) deleteUI -window asPwtWin ;
  window -title "Select paint weight deformer" -resizeToFitChildren on asPwtWin ;
  paneLayout ;
  textScrollList -selectCommand ("as_paintWeightScript(\"\")") -doubleClickCommand ("deleteUI -window asPwtWin") asPwtScrollList ;
  for($x in $wo) textScrollList -e -append $x asPwtScrollList ;
  showWindow asPwtWin ;
 }else as_paintWeightScript($wo[0]) ;
 return 0 ;
}

global proc as_paintWeightScript(string $deformer){
 if(`window -exists asPwtWin`){
  $sel = ` textScrollList -q -selectItem asPwtScrollList ` ;
  $deformer = $sel[0] ;
 }
 if($deformer=="skinCluster") { ArtPaintSkinWeightsTool ; print "Set to paint skinCluster" ; }
 else if($deformer=="cluster")  artAttrToolScript 4 "cluster" ;
 else if($deformer=="textureDeformer")  artAttrToolScript 4 "textureDeformer" ;
 else if($deformer=="blendShape")  ArtPaintBlendShapeWeightsToolOptions ; 
 else if($deformer=="deltaMush")  artAttrToolScript 4 "deltaMush" ; 
 else if($deformer=="tension")  artAttrToolScript 4 "tension" ;
 else if($deformer=="Input Attract")  { setNClothMapType("inputAttract","",1); artAttrNClothToolScript 4 inputAttract ; } 
 else if($deformer=="Mass") { setNClothMapType("mass","",1); artAttrNClothToolScript 4 mass; } 
}

global proc as_scriptFolderUI(){
 $fp = ` workspace -q -rootDirectory ` ;
 $fp = $fp + "scripts/" ;

 $mel = ` getFileList -folder $fp -filespec "*.mel" ` ;
 $py = ` getFileList -folder $fp -filespec "*.py" ` ;
 
 if((size($mel)+size($py))>0){
  if(`window -exists as_scriptsFolder`) deleteUI -window as_scriptsFolder ;
  window -title "Scripts Folder" -resizeToFitChildren on as_scriptsFolder ;
  gridLayout -numberOfColumns 1 -cellWidthHeight 200 35;
  if(size($mel)>0){
   $i = 0 ;
   while($i<size($mel)){
    $n = startString($mel[$i],(size($mel[$i])-4)) ;
	$nn = basenameEx($mel[$i]) ;
    button -label $nn -command ("source \""+$fp+$mel[$i]+"\"; "+$n+"; ") ;
    $i++ ;
   }
  }
  if(size($py)>0){
   python("import sys");
   python("import maya.OpenMaya as om");
   python("pPath = '"+$fp+"'");
   python("om.MGlobal.displayInfo(pPath)");
   python("if pPath not in sys.path : sys.path.append(pPath)");
   $i = 0 ;
   while($i<size($py)){
    $n = startString($py[$i],(size($py[$i])-3)) ;
    button -label $py[$i] -command ("python(\"exec \\\"try: reload("+$n+")\\\\nexcept NameError: import "+$n+"\\\"\");") ;
    $i++ ;
   }
  showWindow as_scriptsFolder ;
  }
 }
 print ("Find " + (size($mel)+size($py)) + " scripts in " + $fp ) ;
}
